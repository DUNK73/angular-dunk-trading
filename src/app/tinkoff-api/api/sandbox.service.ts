/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Empty } from '../model/empty';
import { SandboxRegisterRequest } from '../model/sandboxRegisterRequest';
import { SandboxRegisterResponse } from '../model/sandboxRegisterResponse';
import { SandboxSetCurrencyBalanceRequest } from '../model/sandboxSetCurrencyBalanceRequest';
import { SandboxSetPositionBalanceRequest } from '../model/sandboxSetPositionBalanceRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SandboxService {

    protected basePath = 'https://api-invest.tinkoff.ru/openapi/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Удаление всех позиций
     * Удаление всех позиций клиента
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sandboxClearPost(brokerAccountId?: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public sandboxClearPost(brokerAccountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public sandboxClearPost(brokerAccountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public sandboxClearPost(brokerAccountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (brokerAccountId !== undefined && brokerAccountId !== null) {
            queryParameters = queryParameters.set('brokerAccountId', <any>brokerAccountId);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Empty>('post',`${this.basePath}/sandbox/clear`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Выставление баланса по валютным позициям
     * 
     * @param body Запрос на выставление баланса по валютным позициям
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sandboxCurrenciesBalancePost(body: SandboxSetCurrencyBalanceRequest, brokerAccountId?: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public sandboxCurrenciesBalancePost(body: SandboxSetCurrencyBalanceRequest, brokerAccountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public sandboxCurrenciesBalancePost(body: SandboxSetCurrencyBalanceRequest, brokerAccountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public sandboxCurrenciesBalancePost(body: SandboxSetCurrencyBalanceRequest, brokerAccountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sandboxCurrenciesBalancePost.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (brokerAccountId !== undefined && brokerAccountId !== null) {
            queryParameters = queryParameters.set('brokerAccountId', <any>brokerAccountId);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Empty>('post',`${this.basePath}/sandbox/currencies/balance`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Выставление баланса по инструментным позициям
     * 
     * @param body Запрос на выставление баланса по инструментным позициям
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sandboxPositionsBalancePost(body: SandboxSetPositionBalanceRequest, brokerAccountId?: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public sandboxPositionsBalancePost(body: SandboxSetPositionBalanceRequest, brokerAccountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public sandboxPositionsBalancePost(body: SandboxSetPositionBalanceRequest, brokerAccountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public sandboxPositionsBalancePost(body: SandboxSetPositionBalanceRequest, brokerAccountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sandboxPositionsBalancePost.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (brokerAccountId !== undefined && brokerAccountId !== null) {
            queryParameters = queryParameters.set('brokerAccountId', <any>brokerAccountId);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Empty>('post',`${this.basePath}/sandbox/positions/balance`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Регистрация клиента в sandbox
     * Создание счета и валютных позиций для клиента
     * @param body Запрос на создание счета и выставление баланса по валютным позициям
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sandboxRegisterPost(body?: SandboxRegisterRequest, observe?: 'body', reportProgress?: boolean): Observable<SandboxRegisterResponse>;
    public sandboxRegisterPost(body?: SandboxRegisterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SandboxRegisterResponse>>;
    public sandboxRegisterPost(body?: SandboxRegisterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SandboxRegisterResponse>>;
    public sandboxRegisterPost(body?: SandboxRegisterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SandboxRegisterResponse>('post',`${this.basePath}/sandbox/register`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Удаление счета
     * Удаление счета клиента
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sandboxRemovePost(brokerAccountId?: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public sandboxRemovePost(brokerAccountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public sandboxRemovePost(brokerAccountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public sandboxRemovePost(brokerAccountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (brokerAccountId !== undefined && brokerAccountId !== null) {
            queryParameters = queryParameters.set('brokerAccountId', <any>brokerAccountId);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Empty>('post',`${this.basePath}/sandbox/remove`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
