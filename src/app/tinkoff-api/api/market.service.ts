/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CandleResolution } from '../model/candleResolution';
import { CandlesResponse } from '../model/candlesResponse';
import { MarketInstrumentListResponse } from '../model/marketInstrumentListResponse';
import { OrderbookResponse } from '../model/orderbookResponse';
import { SearchMarketInstrumentResponse } from '../model/searchMarketInstrumentResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MarketService {

    protected basePath = 'https://api-invest.tinkoff.ru/openapi/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Получение списка облигаций
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketBondsGet(observe?: 'body', reportProgress?: boolean): Observable<MarketInstrumentListResponse>;
    public marketBondsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MarketInstrumentListResponse>>;
    public marketBondsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MarketInstrumentListResponse>>;
    public marketBondsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MarketInstrumentListResponse>('get',`${this.basePath}/market/bonds`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение исторических свечей по FIGI
     * 
     * @param figi FIGI
     * @param from Начало временного промежутка
     * @param to Конец временного промежутка
     * @param interval Интервал свечи
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketCandlesGet(figi: string, from: Date, to: Date, interval: CandleResolution, observe?: 'body', reportProgress?: boolean): Observable<CandlesResponse>;
    public marketCandlesGet(figi: string, from: Date, to: Date, interval: CandleResolution, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CandlesResponse>>;
    public marketCandlesGet(figi: string, from: Date, to: Date, interval: CandleResolution, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CandlesResponse>>;
    public marketCandlesGet(figi: string, from: Date, to: Date, interval: CandleResolution, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (figi === null || figi === undefined) {
            throw new Error('Required parameter figi was null or undefined when calling marketCandlesGet.');
        }

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling marketCandlesGet.');
        }

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling marketCandlesGet.');
        }

        if (interval === null || interval === undefined) {
            throw new Error('Required parameter interval was null or undefined when calling marketCandlesGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (figi !== undefined && figi !== null) {
            queryParameters = queryParameters.set('figi', <any>figi);
        }
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from.toISOString());
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to.toISOString());
        }
        if (interval !== undefined && interval !== null) {
            queryParameters = queryParameters.set('interval', <any>interval);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CandlesResponse>('get',`${this.basePath}/market/candles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение списка валютных пар
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketCurrenciesGet(observe?: 'body', reportProgress?: boolean): Observable<MarketInstrumentListResponse>;
    public marketCurrenciesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MarketInstrumentListResponse>>;
    public marketCurrenciesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MarketInstrumentListResponse>>;
    public marketCurrenciesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MarketInstrumentListResponse>('get',`${this.basePath}/market/currencies`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение списка ETF
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketEtfsGet(observe?: 'body', reportProgress?: boolean): Observable<MarketInstrumentListResponse>;
    public marketEtfsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MarketInstrumentListResponse>>;
    public marketEtfsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MarketInstrumentListResponse>>;
    public marketEtfsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MarketInstrumentListResponse>('get',`${this.basePath}/market/etfs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение стакана по FIGI
     * 
     * @param figi FIGI
     * @param depth Глубина стакана [1..20]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketOrderbookGet(figi: string, depth: number, observe?: 'body', reportProgress?: boolean): Observable<OrderbookResponse>;
    public marketOrderbookGet(figi: string, depth: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderbookResponse>>;
    public marketOrderbookGet(figi: string, depth: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderbookResponse>>;
    public marketOrderbookGet(figi: string, depth: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (figi === null || figi === undefined) {
            throw new Error('Required parameter figi was null or undefined when calling marketOrderbookGet.');
        }

        if (depth === null || depth === undefined) {
            throw new Error('Required parameter depth was null or undefined when calling marketOrderbookGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (figi !== undefined && figi !== null) {
            queryParameters = queryParameters.set('figi', <any>figi);
        }
        if (depth !== undefined && depth !== null) {
            queryParameters = queryParameters.set('depth', <any>depth);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<OrderbookResponse>('get',`${this.basePath}/market/orderbook`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение инструмента по FIGI
     * 
     * @param figi FIGI
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketSearchByFigiGet(figi: string, observe?: 'body', reportProgress?: boolean): Observable<SearchMarketInstrumentResponse>;
    public marketSearchByFigiGet(figi: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchMarketInstrumentResponse>>;
    public marketSearchByFigiGet(figi: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchMarketInstrumentResponse>>;
    public marketSearchByFigiGet(figi: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (figi === null || figi === undefined) {
            throw new Error('Required parameter figi was null or undefined when calling marketSearchByFigiGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (figi !== undefined && figi !== null) {
            queryParameters = queryParameters.set('figi', <any>figi);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SearchMarketInstrumentResponse>('get',`${this.basePath}/market/search/by-figi`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение инструмента по тикеру
     * 
     * @param ticker Тикер инструмента
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketSearchByTickerGet(ticker: string, observe?: 'body', reportProgress?: boolean): Observable<MarketInstrumentListResponse>;
    public marketSearchByTickerGet(ticker: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MarketInstrumentListResponse>>;
    public marketSearchByTickerGet(ticker: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MarketInstrumentListResponse>>;
    public marketSearchByTickerGet(ticker: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling marketSearchByTickerGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ticker !== undefined && ticker !== null) {
            queryParameters = queryParameters.set('ticker', <any>ticker);
        }

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MarketInstrumentListResponse>('get',`${this.basePath}/market/search/by-ticker`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение списка акций
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public marketStocksGet(observe?: 'body', reportProgress?: boolean): Observable<MarketInstrumentListResponse>;
    public marketStocksGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MarketInstrumentListResponse>>;
    public marketStocksGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MarketInstrumentListResponse>>;
    public marketStocksGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (sso_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MarketInstrumentListResponse>('get',`${this.basePath}/market/stocks`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
